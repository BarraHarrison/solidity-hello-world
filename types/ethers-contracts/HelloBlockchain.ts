/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface HelloBlockchainInterface extends Interface {
    getFunction(nameOrSignature: "getMessage" | "updateMessage"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "MessageUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'getMessage', values?: undefined): string;
encodeFunctionData(functionFragment: 'updateMessage', values: [string]): string;

    decodeFunctionResult(functionFragment: 'getMessage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateMessage', data: BytesLike): Result;
  }

  
    export namespace MessageUpdatedEvent {
      export type InputTuple = [sender: AddressLike, oldMessage: string, newMessage: string];
      export type OutputTuple = [sender: string, oldMessage: string, newMessage: string];
      export interface OutputObject {sender: string, oldMessage: string, newMessage: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface HelloBlockchain extends BaseContract {
    
    connect(runner?: ContractRunner | null): HelloBlockchain;
    waitForDeployment(): Promise<this>;

    interface: HelloBlockchainInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getMessage: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    updateMessage: TypedContractMethod<
      [newMessage: string, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getMessage'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'updateMessage'): TypedContractMethod<
      [newMessage: string, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'MessageUpdated'): TypedContractEvent<MessageUpdatedEvent.InputTuple, MessageUpdatedEvent.OutputTuple, MessageUpdatedEvent.OutputObject>;

    filters: {
      
      'MessageUpdated(address,string,string)': TypedContractEvent<MessageUpdatedEvent.InputTuple, MessageUpdatedEvent.OutputTuple, MessageUpdatedEvent.OutputObject>;
      MessageUpdated: TypedContractEvent<MessageUpdatedEvent.InputTuple, MessageUpdatedEvent.OutputTuple, MessageUpdatedEvent.OutputObject>;
    
    };
  }